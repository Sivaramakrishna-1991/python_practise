Bitwise Operators:

Bitwise operators permit us to work with individual bits of a byte. 
There are many bitwise operators available:
~ not (also called complement operator)
<< left shift
>> right shift
& and ( 1 & 1 = 1 and 0 & 1 = 0 and 0 & 0 = 0)
| or  ( 1 | 1 = 1 and 0 | 1 = 1 and 0 | 0 = 0)
^ xor ( 1 ^ 1 = 0 and 0 ^ 1 = 1 and 0 ^ 0 = 0)

ex: 1
5 (0101) 
~ 5 (1010)

ex: 2
<< 1 shift 1 bit left
0101 --> 1010 = 10

ex: 3
>> 2 shift 2 places right
0101 --> 0010 --> 0001 = 1

ex: 4
5 & 6 
0101 & 0110 = 0100 = 4

ex: 5
5 | 6
0101 | 0110 = 0110 = 6

ex: 6
5 ^ 6
0101 ^ 0110 = 0010 = 2

ex: 7
Counting Bits
Write a function that takes a positive integer as input and returns the count of its set bits 
(number of 1s) using bitwise operators.

def count_bits(n):
    count = 0
    while n:
        count += n & 1
        n >>= 1
    return count

# Test the function
print(count_bits(10))  # Output: 2 (binary: 1010)
print(count_bits(7))   # Output: 3 (binary: 0111)
print(count_bits(16))  # Output: 1 (binary: 10000)

ex: 8
Swap Two Numbers

def swap_numbers(a, b):
    a = a ^ b
    b = a ^ b
    a = a ^ b
    return a, b

# Test the function
x = 10
y = 5
x, y = swap_numbers(x, y)
print(x, y)  # Output: 5 10

ex: 9
Check Power of Two
def is_power_of_two(n):
    if n <= 0:
        return False
    return (n & (n - 1)) == 0

# Test the function
print(is_power_of_two(16))   # Output: True
print(is_power_of_two(10))   # Output: False
print(is_power_of_two(1024)) # Output: True

