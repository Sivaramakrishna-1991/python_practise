class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None


class LinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def head_insert(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            self.tail = new_node
        else:
            self.head.prev = new_node
            new_node.next = self.head
            self.head = new_node

    def tail_insert(self, data):
        new_node = Node(data)
        if not self.tail:
            self.head = new_node
            self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node

    @staticmethod
    def after_node(node, data):
        new_node = Node(data)
        new_node.next = node.next
        new_node.prev = node
        node.next = new_node

    @staticmethod
    def before_node(node, data):
        new_node = Node(data)
        temp = node.prev
        temp.next = new_node
        new_node.prev = node.prev
        node.prev = new_node
        new_node.next = node

    def forward_traverse(self):
        temp = self.head
        while temp is not None:
            print(temp.data, end='-->')
            temp = temp.next

    def reverse_traverse(self):
        temp = self.tail
        while temp is not None:
            print(temp.data, end='-->')
            temp = temp.prev

    def delete_at_starting(self):
        if not self.head:
            return
        if self.head == self.tail:
            self.head = None
            self.tail = None
        else:
            self.head = self.head.next
            self.head.prev = None

    def delete_at_end(self):
        if not self.tail:
            return
        if self.head == self.tail:
            self.head = None
            self.tail = None
        else:
            self.tail = self.tail.prev
            self.tail.next = None

    def delete_after_node(self, node):
        if not node or not node.next:
            return
        deleted_node = node.next
        node.next = deleted_node.next
        if deleted_node.next:
            deleted_node.next.prev = node
        else:
            self.tail = node

    def delete_before_node(self, node):
        if not node or not node.prev:
            return
        if node.prev == self.head:
            self.head = node
            node.prev = None
        else:
            node.prev = node.prev.prev
            node.prev.next = node

    def search(self, data):
        temp = self.head
        while temp:
            if temp.data == data:
                print("\nElement in the linked list")
            temp = temp.next


# Example usage:
ll = LinkedList()
ll.head_insert(5)
ll.head_insert(10)
ll.head_insert(15)
ll.tail_insert(1)
ll.tail_insert(0)
second = ll.head.next
ll.after_node(second, 20)
ll.before_node(second, 30)

print("Forward Traversal:")
ll.forward_traverse()

print("\nReverse Traversal:")
ll.reverse_traverse()

print("\nAfter Deleting at starting:")
ll.delete_at_starting()
ll.forward_traverse()

print("\nAfter Deleting at end:")
ll.delete_at_end()
ll.forward_traverse()

print("\nAfter Deleting after a node:")
first = ll.head.next
second = first.next
ll.delete_after_node(second)
ll.forward_traverse()

print("\nAfter Deleting before a node:")
first = ll.head.next
second = first.next
third = second.next
ll.delete_before_node(third)
ll.forward_traverse()
ll.search(1)

