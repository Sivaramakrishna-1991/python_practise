# Circular Queue Implementation
# enqueue()
# dequeue()
# display()
# define the size of queue, self.front, self.rear
# 4 5 6 7 8
class CircularQueue:
    def __init__(self, k):
        self.k = k
        self.queue = [None] * k
        self.front = self.rear = -1

    def enqueue(self, item):
        if (self.rear + 1) % self.k == self.front:
            print("Circular Queue is full")
        elif self.front == -1:
            self.rear = 0
            self.front = 0
            self.queue[self.rear] = item
        else:
            self.rear = (self.rear + 1) % self.k
            self.queue[self.rear] = item

    def dequeue(self):
        if self.rear == self.front == -1:
            print("Circular Queue is empty! ")
        elif self.front == self.rear:
            temp = self.queue[self.front]
            self.front = self.rear = -1
            return temp
        else:
            temp = self.queue[self.front]
            self.front = (self.front + 1) % self.k
            return temp

    def display(self):
        if self.front == self.rear == -1:
            print("Circular Queue is empty")
        elif self.rear >= self.front:
            for i in range(self.front, self.rear +1):
                print(self.queue[i])
        else:
            for i in range(self.front, self.k):
                print(self.queue[i])
            for i in range(0, self.rear + 1):
                print(self.queue[i])


q = CircularQueue(8)
q.enqueue(5)
q.display()
q.enqueue(7)
q.display()

