polymorphism  --> duck typing --> the same entity( function or obj) behaves differently in different scenarios. 

class Duck:
	def talk(self):
		print('quack quack')

class Human:
	def talk(self):
		print('talk')

def callTalk(obj):
	obj.talk()
d=Duck()
callTalk(d)
h=Human()
callTalk(h)

ex:2 
class Flight:
	def __init__(self, engine):
		self.engine=engine
	def startEngine(self):
		self.engine.start()
class AirbusEngine:
	def start(self):
		print("Starting Airbus engine")
class BoingEngine:
	def start(self):
		print("Starting Boing engine")

ae = AirbusEngine()
f = Flight(ae)
f.startEngine()

be = BoingEngine()
f1 = Flight(be)
f1.startEngine()
