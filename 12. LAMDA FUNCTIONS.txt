1. A lambda function can take any number of arguments but can return only one values. 
   lambda n: n* n* n
   lambda x, y, z: (x+y+z)/3
   lambda s: s.trim().upper()

2. A higher order function is a function that can receive other functions as arguments or return them. 
   For example, we can pass a lambda function to the built-in sorted() function to sort a dictionary by values.
   Map, Filter, Reduce are higher order functions 
   ex: d = {'Oil': 230, 'Clip': 150, 'Stud': 175}
       d1 = sorted(d.items(), key = lambda kv: kv[1])

Map: A map operation applies a function to each element in the sequence like list, tuple, etc. and returns a new
     sequence containing the results. 
     ex: 1. finding square root of all number in the list and returning a list of these roots.
         2. converting all characters in the list to uppercase and returning the uppercase characters' list.


Filter: A filter operation applies a function to all the elements of a sequence. A sequence of those elements for 
        which the function returns True is returned. 
	ex: 1. Checking whether each element in a list is an alphabet and returning a list of alphabets.
	    2. Checking whether each element in a list is odd and returning a list of odd numbers.

Reduce: A reduce operation perfroms a rolling computation to sequential pairs of values in a sequence and returns 
	the result. 
	ex: 1. obtaining product of a list of integers and returning the product.
	    2. Concatenating all string in a list and returning the final string.


--> from functools import reduce
filter(function_to_apply, list_of_inputs)